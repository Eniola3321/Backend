generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  passwordHash  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  wallets       CryptoWallet[]
  insights      Insight[]
  oauthTokens   OAuthToken[]
  payments      Payment[]
  subscriptions Subscription[]

  @@map("users")
}

model OAuthToken {
  id           String    @id @default(uuid())
  userId       String
  provider     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  encrypted    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
}

model Payment {
  id             String        @id @default(uuid())
  userId         String
  subscriptionId String
  amount         Float
  currency       String        @default("USD")
  method         PaymentMethod
  status         PaymentStatus
  txHash         String?
  providerTxId   String?
  paidAt         DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
}

model CryptoWallet {
  id        String   @id @default(uuid())
  userId    String
  address   String
  chain     String
  network   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id           String             @id @default(uuid())
  userId       String
  externalId   String?
  serviceName  String
  source       String?
  amount       Float
  currency     String
  billingCycle String
  nextRenewal  DateTime?
  status       SubscriptionStatus
  lastSyncedAt DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  insights     Insight[]
  payments     Payment[]
  user         User               @relation(fields: [userId], references: [id])
  usage        Usage?
}

model Usage {
  id             String       @id @default(uuid())
  subscriptionId String       @unique
  lastEmailDate  DateTime?
  lastApiUse     DateTime?
  lastLogin      DateTime?
  usageScore     Int          @default(0)
  status         UsageStatus
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model Insight {
  id             String        @id @default(uuid())
  userId         String
  subscriptionId String?
  type           String
  message        String
  createdAt      DateTime      @default(now())
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  CRYPTO
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED

  @@map("payment")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  TRIAL
  PAST_DUE
}

enum UsageStatus {
  ACTIVE
  AT_RISK
  UNUSED
}
